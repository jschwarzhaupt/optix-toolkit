#
# Copyright (c) 2022, NVIDIA CORPORATION. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#  * Neither the name of NVIDIA CORPORATION nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

# Using the latest CMake is highly recommended, to ensure up-to-date CUDA language support.
cmake_minimum_required(VERSION 3.23 FATAL_ERROR)
include(../CMake/Policies.cmake)

project(Util LANGUAGES C CXX CUDA)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED TRUE)
set(CMAKE_CXX_EXTENSIONS OFF)

include(GNUInstallDirs)
include(../CMake/BuildConfig.cmake)

find_package( CUDAToolkit 11.1 REQUIRED )

add_library(SceneDB SHARED
  src/AppendOnlyFile.cpp
  src/ObjectFileReader.cpp
  src/ObjectFileReaderGds.cpp
  src/ObjectIndex.cpp
  src/ObjectStoreImpl.cpp
  src/ObjectStoreReaderImpl.cpp
  src/ObjectStoreReaderGdsImpl.cpp
  src/ObjectStoreWriterImpl.cpp
  src/GenericTableImpl.cpp
  src/GenericTableReaderImpl.cpp
  src/GenericTableWriterImpl.cpp
  )

if(NOT PROJECT_IS_TOP_LEVEL)
  add_library(OptiXToolkit::SceneDB ALIAS SceneDB)
endif()

target_sources(SceneDB 
  PUBLIC 
  FILE_SET HEADERS 
  BASE_DIRS include
  FILES
  include/OptiXToolkit/SceneDB/DataBlock.h
  include/OptiXToolkit/SceneDB/GenericTable.h
  include/OptiXToolkit/SceneDB/GenericTableReader.h
  include/OptiXToolkit/SceneDB/GenericTableWriter.h
  include/OptiXToolkit/SceneDB/ObjectStore.h
  include/OptiXToolkit/SceneDB/ObjectStoreReader.h
  include/OptiXToolkit/SceneDB/ObjectStoreWriter.h
  include/OptiXToolkit/SceneDB/Table.h
  include/OptiXToolkit/SceneDB/TableReader.h
  include/OptiXToolkit/SceneDB/TableWriter.h
  )

source_group( "Header Files\\Implementation" FILES
  src/AppendOnlyFile.h
  src/ObjectStoreImpl.h
  src/ObjectStoreReaderImpl.h
  src/ObjectStoreReaderGdsImpl.h
  src/ObjectStoreWriterImpl.h
  src/GenericTableImpl.h
  src/GenericTableReaderImpl.h
  src/GenericTableWriterImpl.h
  )

target_include_directories(SceneDB PUBLIC
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
  $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
  )

# cufile library (required for GDS) not found by find package( CUDAtoolkit ... )
find_library(CUFILE_LIBRARY
  NAMES cufile libcufile
  HINTS ${CUDAToolkit_LIBRARY_DIR}  
  ) 

target_link_libraries(SceneDB PRIVATE
  OptiXToolkit::Util 
  CUDA::cudart
  ${CUFILE_LIBRARY}
  )

set_target_properties(SceneDB PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS ON)

install(TARGETS SceneDB
  EXPORT SceneDBTargets
  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}/OptiXToolkit
  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}/OptiXToolkit
  FILE_SET HEADERS DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
  )

install(EXPORT SceneDBTargets
  FILE SceneDBTargets.cmake
  DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/OptiXToolkit
  NAMESPACE OptiXToolkit::
  )

add_subdirectory("tests")
